#!/bin/bash

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
source /scripts/utils/check-prerequisites.sh

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKUP_DIR="/opt/backups/telegram-bot/pre-deploy"
APP_DIR="/opt/simple-finances-bot"  # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_DATA_DIR="$APP_DIR/data"       # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
WORK_DIR="/opt/actions-runner/_work/simple-finances-bot/simple-finances-bot"
LOG_FILE="/var/log/telegram-bot-deploy.log"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
setup_directories() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -d "$APP_DIR" ] || [ ! -d "$APP_DATA_DIR" ] || [ ! -d "$BACKUP_DIR" ]; then
        echo "Required directories don't exist. Please run init-server.sh first"
        echo "Or run these commands manually:"
        echo "sudo mkdir -p $APP_DIR $APP_DATA_DIR $BACKUP_DIR"
        echo "sudo chown -R github-runner:github-runner $APP_DIR"
        echo "sudo chown -R github-runner:github-runner $BACKUP_DIR"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if [ ! -w "$APP_DIR" ] || [ ! -w "$APP_DATA_DIR" ] || [ ! -w "$BACKUP_DIR" ]; then
        echo "Insufficient permissions. Please check directory permissions"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
create_backup() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="$BACKUP_DIR/expenses_$timestamp.db"

    if [ -f "$APP_DATA_DIR/expenses.db" ]; then
        cp "$APP_DATA_DIR/expenses.db" "$backup_file"
        if [ $? -eq 0 ]; then
            log "‚úÖ Created backup: $backup_file"
            return 0
        else
            log "‚ùå Failed to create backup"
            return 1
        fi
    else
        log "‚ö†Ô∏è No database file found to backup"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
cleanup_old_backups() {
    log "üßπ Cleaning up old backups..."
    find "$BACKUP_DIR" -name "expenses_*.db" -type f -mtime +7 -delete
    find "$BACKUP_DIR" -name "expenses_*.db.gz" -type f -mtime +7 -delete
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container_health() {
    local max_attempts=5
    local attempt=1
    local delay=10

    while [ $attempt -le $max_attempts ]; do
        log "Health check attempt $attempt of $max_attempts..."

        if docker compose ps | grep -q "Up"; then
            log "‚úÖ Container is healthy"
            return 0
        fi

        log "‚è≥ Container not ready, waiting $delay seconds..."
        sleep $delay
        attempt=$((attempt+1))
    done

    log "‚ùå Container health check failed"
    return 1
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
main() {
    log "üöÄ Starting deployment process..."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        setup_directories

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º prerequisites
        log "üîç Checking prerequisites..."
        check_prerequisites
        if [ $? -ne 0 ]; then
            log "‚ùå Prerequisites check failed"
            exit 1
        fi

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    log "üì¶ Creating backup..."
    create_backup
    if [ $? -ne 0 ]; then
        log "‚ùå Backup failed, aborting deployment"
        exit 1
    fi

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "üõë Stopping current containers..."
    docker compose down
    if [ $? -ne 0 ]; then
        log "‚ö†Ô∏è Failed to stop containers, but continuing..."
    fi

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
    log "üßπ Cleaning up old images..."
    docker image prune -f

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "üèóÔ∏è Building and starting containers..."
    if ! docker compose up -d --build; then
        log "‚ùå Failed to start containers"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    log "üè• Checking container health..."
    if ! check_container_health; then
        log "‚ùå Container failed health check"
        log "üìã Container logs:"
        docker compose logs
        exit 1
    fi

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    cleanup_old_backups

    log "‚úÖ Deployment completed successfully"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
set -e
trap 'log "‚ùå Error on line $LINENO"' ERR

# –ó–∞–ø—É—Å–∫
main "$@"
