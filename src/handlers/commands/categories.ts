import { CommandContext } from "../types";
import { eq, and, isNull } from "drizzle-orm";
import { expenses, userCategories } from "../../db/schema";
import { BUTTONS } from "../types";

export const CATEGORY_ACTIONS = {
  ADD: "add_cat",
  DELETE: "del_cat",
  LIST: "list_cat",
  CANCEL: "cancel_cat",
} as const;

// Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const awaitingCategoryInput = new Set<number>();

const DEFAULT_CATEGORIES = [
  "–ü—Ä–æ–¥—É–∫—Ç—ã",
  "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
  "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
  "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
  "–ü—Ä–æ—á–µ–µ",
];

export async function getUserCategories(
  db: CommandContext["db"],
  userId: string,
): Promise<string[]> {
  const categories = await db
    .select({ name: userCategories.name })
    .from(userCategories)
    .where(eq(userCategories.userId, userId));

  return categories.map((cat) => cat.name);
}

export async function handleCategories(
  { bot, db }: CommandContext,
  chatId: number,
) {
  try {
    const uncategorizedExpenses = await db
      .select()
      .from(expenses)
      .where(
        and(isNull(expenses.category), eq(expenses.userId, chatId.toString())),
      );

    if (uncategorizedExpenses.length === 0) {
      await bot.sendMessage(chatId, "‚ú® –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!");
      return;
    }

    const userCategories = await getUserCategories(db, chatId.toString());
    const categoriesToUse =
      userCategories.length > 0 ? userCategories : DEFAULT_CATEGORIES;

    for (const expense of uncategorizedExpenses) {
      const keyboard = {
        inline_keyboard: categoriesToUse.map((cat) => [
          {
            text: cat,
            callback_data: `cat_${expense.id}_${cat}`,
          },
        ]),
      };

      await bot.sendMessage(
        chatId,
        `üí∞ –†–∞—Å—Ö–æ–¥: ${expense.amount}‚ÇΩ\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expense.description}\nüìÖ –î–∞—Ç–∞: ${new Date(expense.date).toLocaleDateString()}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`,
        { reply_markup: keyboard },
      );
    }
  } catch (error) {
    console.error("Error in handleCategories:", error);
    await bot.sendMessage(
      chatId,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
    );
  }
}

export async function handleCategoryManagement(
  context: CommandContext,
  action: string,
  chatId: number,
  messageId?: number,
) {
  const { bot, db } = context;

  switch (action) {
    case CATEGORY_ACTIONS.ADD:
      awaitingCategoryInput.add(chatId);
      await bot.sendMessage(chatId, "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
      break;

    case CATEGORY_ACTIONS.LIST:
      const categories = await getUserCategories(db, chatId.toString());
      if (categories.length === 0) {
        await bot.sendMessage(chatId, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.");
        return;
      }

      const categoriesList = categories
        .map((cat, index) => `${index + 1}. ${cat}`)
        .join("\n");

      await bot.sendMessage(chatId, `üìã –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n${categoriesList}`);
      break;

    case CATEGORY_ACTIONS.DELETE:
      const userCategories = await getUserCategories(db, chatId.toString());
      if (userCategories.length === 0) {
        await bot.sendMessage(chatId, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.");
        return;
      }

      const deleteKeyboard = {
        inline_keyboard: userCategories.map((cat) => [
          {
            text: `‚ùå ${cat}`,
            callback_data: `delete_category_${cat}`,
          },
        ]),
      };

      await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
        reply_markup: deleteKeyboard,
      });
      break;

    case CATEGORY_ACTIONS.CANCEL:
      awaitingCategoryInput.delete(chatId);
      if (messageId) {
        await bot.editMessageText("üîô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", {
          chat_id: chatId,
          message_id: messageId,
        });
      }
      break;
  }
}

export function setupCategoryCommands(context: CommandContext) {
  const { bot, db } = context;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã"
  bot.onText(/categorize|–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã/, async (msg) => {
    const chatId = msg.chat.id;
    await handleCategories(context, chatId);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  bot.onText(new RegExp(BUTTONS.MANAGE_CATEGORIES), async (msg) => {
    const chatId = msg.chat.id;
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            callback_data: CATEGORY_ACTIONS.ADD,
          },
        ],
        [
          {
            text: "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            callback_data: CATEGORY_ACTIONS.DELETE,
          },
        ],
        [{ text: "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data: CATEGORY_ACTIONS.LIST }],
        [{ text: "üîô –û—Ç–º–µ–Ω–∞", callback_data: CATEGORY_ACTIONS.CANCEL }],
      ],
    };

    await bot.sendMessage(chatId, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:", {
      reply_markup: keyboard,
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  bot.on("message", async (msg) => {
    if (!msg.text || msg.text.startsWith("/")) return;
    const chatId = msg.chat.id;
    const text = msg.text.trim();

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∫–Ω–æ–ø–æ–∫
    if (Object.values(BUTTONS).includes(text as any)) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (awaitingCategoryInput.has(chatId)) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–∏—Å–ª–æ–º
        if (!isNaN(Number(text))) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º",
          );
          return;
        }

        await db.insert(userCategories).values({
          name: text,
          userId: chatId.toString(),
        });

        await bot.sendMessage(
          chatId,
          `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${text}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞`,
        );
      } catch (error: any) {
        if (error?.code === "SQLITE_CONSTRAINT") {
          await bot.sendMessage(chatId, "‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        } else {
          console.error("Error adding category:", error);
          await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        }
      } finally {
        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        awaitingCategoryInput.delete(chatId);
      }
    }
  });
}
