import TelegramBot from "node-telegram-bot-api";
import { CommandContext } from "../types";
import { eq } from "drizzle-orm";
import { expenses } from "../../db/schema";
import { HISTORY_ACTIONS } from "../commands/history";

export function setupHistoryCallback(context: CommandContext) {
  const { bot, db } = context;

  return async (query: TelegramBot.CallbackQuery) => {
    if (!query.data || !query.message) return;

    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;

    switch (query.data) {
      case HISTORY_ACTIONS.CONFIRM_CLEAR:
        try {
          await db
            .delete(expenses)
            .where(eq(expenses.userId, chatId.toString()));

          await bot.answerCallbackQuery(query.id, {
            text: "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω–∞",
          });

          await bot.editMessageText("‚úÖ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", {
            chat_id: chatId,
            message_id: messageId,
          });
        } catch (error) {
          console.error("Error clearing history:", error);
          await bot.answerCallbackQuery(query.id, {
            text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏",
            show_alert: true,
          });
        }
        break;

      case HISTORY_ACTIONS.CANCEL_CLEAR:
        try {
          await bot.answerCallbackQuery(query.id, {
            text: "üîô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
          });

          await bot.editMessageText("üîô –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", {
            chat_id: chatId,
            message_id: messageId,
          });
        } catch (error) {
          console.error("Error canceling history clear:", error);
          await bot.answerCallbackQuery(query.id, {
            text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            show_alert: true,
          });
        }
        break;
    }
  };
}
